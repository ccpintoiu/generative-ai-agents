prompt,code_output
Write a Python function that takes a list of numbers and returns the sum of all the numbers in the list.,"# The following code was generated by AI.

def sum_list(numbers):
    total = 0
    for number in numbers:
        total += number
    return total"
Write a Python function that takes a string and returns the string in reverse.,"# The following code was generated by AI.

def reverse_string(string):
    reversed_string = """"
    for i in range(len(string) - 1, -1, -1):
        reversed_string += string[i]
    return reversed_string"
Write a Python function that takes a number and returns the square root of the number.,"# The following code was generated by AI.

import math

def square_root(number):
    return math.sqrt(number)"
Write a Python function that takes a list of strings and returns the longest string in the list.,"# The following code was generated by AI.

def longest_string(strings):
    longest_string = """"
    for string in strings:
        if len(string) > len(longest_string):
            longest_string = string
    return longest_string"
Write a Python function that takes a list of numbers and returns the average of the numbers.,"# The following code was generated by AI.

def average(numbers):
    total = 0
    for number in numbers:
        total += number
    return total / len(numbers)"
Write a Python function that takes a list of numbers and returns the median of the numbers.,"# The following code was generated by AI.

def median(numbers):
    numbers.sort()
    if len(numbers) % 2 == 0:
        return (numbers[len(numbers) // 2] + numbers[len(numbers) // 2 - 1]) / 2
    else:
        return numbers[len(numbers) // 2]"
Write a Python function that takes a list of numbers and returns the mode of the numbers.,"# The following code was generated by AI.

from collections import Counter

def mode(numbers):
    counts = Counter(numbers)
    return counts.most_common(1)[0][0]"
Write a Python function that takes a list of numbers and returns the range of the numbers.,"# The following code was generated by AI.

def range(numbers):
    return max(numbers) - min(numbers)"
 Write a Python function that takes a list of numbers and returns the standard deviation of the numbers.,"# The following code was generated by AI.

import math

def standard_deviation(numbers):
    mean = sum(numbers) / len(numbers)
    variance = sum((number - mean) ** 2 for number in numbers) / len(numbers)
    return math.sqrt(variance)"
Write a Python function that takes a list of numbers and returns the variance of the numbers.,"# The following code was generated by AI.

import math

def variance(numbers):
    mean = sum(numbers) / len(numbers)
    variance = sum((number - mean) ** 2 for number in numbers) / len(numbers)
    return variance"
 Write a Python function that takes a list of numbers and returns the covariance of the numbers.,"# The following code was generated by AI.

import math

def covariance(numbers1, numbers2):
    mean1 = sum(numbers1) / len(numbers1)
    mean2 = sum(numbers2) / len(numbers2)
    covariance = sum((number1 - mean1) * (number2 - mean2) for number1, number2 in zip(numbers1, numbers2)) / len(numbers1)
    return covariance"
Write a Python function that takes a list of numbers and returns the correlation of the numbers.,"# The following code was generated by AI.

import math

def correlation(numbers1, numbers2):
    mean1 = sum(numbers1) / len(numbers1)
    mean2 = sum(numbers2) / len(numbers2)
    covariance = sum((number1 - mean1) * (number2 - mean2) for number1, number2 in zip(numbers1, numbers2)) / len(numbers1)
    standard_deviation1 = math.sqrt(sum((number1 - mean1) ** 2 for number1 in numbers1) / len(numbers1))
    standard_deviation2 = math.sqrt(sum((number2 - mean2) ** 2 for number2 in numbers2) / len(numbers2))
    correlation = covariance / (standard_deviation1 * standard_deviation2)
    return correlation"
Write a Python function that takes a list of numbers and returns the linear regression of the numbers.,"# The following code was generated by AI.

import numpy as np

def linear_regression(numbers):
    x = np.array(range(len(numbers)))
    y = np.array(numbers)
    A = np.vstack([x, np.ones(len(x))]).T
    m, c = np.linalg.lstsq(A, y)[0]
    return m, c"
Write a Python function that takes a list of numbers and returns the exponential regression of the numbers.,"# The following code was generated by AI.

import numpy as np

def exponential_regression(numbers):
    x = np.array(range(len(numbers)))
    y = np.array(numbers)
    A = np.vstack([x, np.ones(len(x))]).T
    m, c = np.linalg.lstsq(A, np.log(y))[0]
    return np.exp(m), c"